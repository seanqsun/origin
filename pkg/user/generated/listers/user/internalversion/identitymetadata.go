// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	user "github.com/openshift/origin/pkg/user/apis/user"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityMetadataLister helps list IdentityMetadatas.
type IdentityMetadataLister interface {
	// List lists all IdentityMetadatas in the indexer.
	List(selector labels.Selector) (ret []*user.IdentityMetadata, err error)
	// Get retrieves the IdentityMetadata from the index for a given name.
	Get(name string) (*user.IdentityMetadata, error)
	IdentityMetadataListerExpansion
}

// identityMetadataLister implements the IdentityMetadataLister interface.
type identityMetadataLister struct {
	indexer cache.Indexer
}

// NewIdentityMetadataLister returns a new IdentityMetadataLister.
func NewIdentityMetadataLister(indexer cache.Indexer) IdentityMetadataLister {
	return &identityMetadataLister{indexer: indexer}
}

// List lists all IdentityMetadatas in the indexer.
func (s *identityMetadataLister) List(selector labels.Selector) (ret []*user.IdentityMetadata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*user.IdentityMetadata))
	})
	return ret, err
}

// Get retrieves the IdentityMetadata from the index for a given name.
func (s *identityMetadataLister) Get(name string) (*user.IdentityMetadata, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(user.Resource("identitymetadata"), name)
	}
	return obj.(*user.IdentityMetadata), nil
}
